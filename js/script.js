// Generated by CoffeeScript 1.6.2
(function() {
  var Calc, Token, isNumber, isString, runCalc, setup,
    _this = this,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };

  isString = function(obj) {
    return Object.prototype.toString.call(obj) === '[object String]';
  };

  Token = {
    NAME: {
      vaue: 1,
      name: "NAME"
    },
    NUMBER: {
      vaue: 2,
      name: "NUMBER"
    },
    END: {
      vaue: 3,
      name: "END"
    },
    PRINT: {
      vaue: 4,
      name: "PRINT"
    },
    PLUS: {
      vaue: 5,
      name: "PLUS"
    },
    MINUS: {
      vaue: 6,
      name: "MINUS"
    },
    MUL: {
      vaue: 7,
      name: "MUL"
    },
    DIV: {
      vaue: 8,
      name: "DIV"
    },
    ASSIGN: {
      vaue: 9,
      name: "ASSIGN"
    },
    LP: {
      vaue: 10,
      name: "LP"
    },
    RP: {
      vaue: 11,
      name: "RP"
    },
    ZERO: {
      vaue: 12,
      name: "ZERO"
    }
  };

  Calc = (function() {
    function Calc() {
      this.exec = __bind(this.exec, this);
      this.expr = __bind(this.expr, this);
      this.term = __bind(this.term, this);
      this.prim = __bind(this.prim, this);
      this.getToken = __bind(this.getToken, this);
      this.showError = __bind(this.showError, this);      this.currToken = Token.PRINT;
      this.charArray = [];
      this.index = 0;
      this.someValue = "";
    }

    Calc.prototype.showError = function(errorMessage) {};

    Calc.prototype.getToken = function() {
      var ch, e;

      ch = '';
      try {
        while (this.charArray[this.index] === " ") {
          this.index++;
        }
      } catch (_error) {
        e = _error;
        return this.currToken = Token.END;
      }
      if (this.index < this.charArray.length) {
        ch = this.charArray[this.index];
        this.index++;
      } else {
        return this.currToken = Token.END;
      }
      switch (ch) {
        case ';':
        case '\n':
        case '=':
          return this.currToken = Token.END;
        case '*':
          return this.currToken = Token.MUL;
        case '/':
          return this.currToken = Token.DIV;
        case '+':
          return this.currToken = Token.PLUS;
        case '-':
          return this.currToken = Token.MINUS;
        case '(':
          return this.currToken = Token.LP;
        case ')':
          return this.currToken = Token.RP;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case '.':
          this.someValue += ch;
          try {
            while (isNumber(this.charArray[this.index]) || this.charArray[this.index] === '.') {
              this.someValue += this.charArray[this.index];
              this.index++;
            }
            return this.currToken = Token.NUMBER;
          } catch (_error) {
            e = _error;
            return this.currToken = Token.END;
          }
          break;
        default:
          if (isString(ch)) {
            this.someValue += ch;
            while (isString(this.charArray[this.index])) {
              this.someValue += this.charArray[this.index];
              this.index++;
            }
            return this.currToken = Token.NAME;
          }
          this.showError('nepravilanaya leksema (' + ch + ')');
          return this.currToken = Token.END;
      }
    };

    Calc.prototype.prim = function(get) {
      var e, nmb;

      if (get) {
        this.getToken();
      }
      switch (this.currToken) {
        case Token.NUMBER:
          nmb = parseFloat(this.someValue);
          this.someValue = '';
          this.getToken();
          return nmb;
        case Token.NAME:
          return '';
        case Token.MINUS:
          return -this.prim(true);
        case Token.LP:
          e = this.expr(true);
          if (this.currToken !== Token.RP) {
            this.showError('ozhidalaos )');
          }
          this.getToken();
          return e;
        default:
          this.showError("ozhidalos' pervichnoe virazhenie. @currToken = " + this.currToken);
          return 0.0;
      }
    };

    Calc.prototype.term = function(get) {
      var d, left;

      left = this.prim(get);
      while (true) {
        switch (this.currToken) {
          case Token.MUL:
            left = left * this.prim(true);
            break;
          case Token.DIV:
            d = this.prim(true);
            if (d !== 0.0) {
              left /= d;
            } else {
              showError('division by 0');
            }
            break;
          default:
            return left;
        }
      }
    };

    Calc.prototype.expr = function(get) {
      var left;

      left = this.term(get);
      while (true) {
        switch (this.currToken) {
          case Token.PLUS:
            left += this.term(true);
            break;
          case Token.MINUS:
            left -= this.term(true);
            break;
          default:
            return left;
        }
      }
    };

    Calc.prototype.exec = function(arg) {
      if (arg == null) {
        return;
      }
      this.charArray = JSON.stringify(arg).split('').slice(1, -1);
      while (true) {
        this.getToken();
        if (this.currToken === Token.END) {
          return '';
        } else {
          return this.expr(false);
        }
      }
    };

    return Calc;

  })();

  runCalc = function(textToCalculate) {
    var calc;

    calc = new Calc;
    return calc.exec(textToCalculate);
  };

  setup = function(sourceSelector, resultSelector) {
    var result, source;

    source = sourceSelector.val();
    result = runCalc(source);
    if (typeof result !== 'undefined' && result !== 0) {
      resultSelector.text(result);
    }
    return true;
  };

  $(function() {
    var resultSelector, sourceSelector;

    sourceSelector = $('#source');
    resultSelector = $('#result');
    return setInterval(function() {
      setup(sourceSelector, resultSelector);
      return true;
    }, 100);
  });

}).call(this);
